name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    
jobs:
  build:  # Définition du job nommé "build"
    name: Build and analyze  # Le nom du job est "Build and analyze"
    runs-on: ubuntu-latest  # Le job sera exécuté sur la dernière version d'Ubuntu disponible sur GitHub Actions
    steps:
      - uses: actions/checkout@v4  # Cette étape utilise l'action "checkout" pour récupérer le code source du repository
        with:
          fetch-depth: 0  # Récupère tout l'historique des commits (par défaut, cela ne récupère que les derniers commits)
          
      - name: Set up JDK 17  # Nom de l'étape : configurer JDK 17
        uses: actions/setup-java@v4  # Utilise l'action officielle pour configurer Java
        with:
          java-version: 17  # Définit la version de Java à utiliser (ici, Java 17)
          distribution: 'corretto'  # Spécifie que la distribution Java à utiliser est "Corretto", qui est la version open-source de Java d'Amazon

      - name: Cache SonarQube packages  # Nom de l'étape : mettre en cache les packages SonarQube
        uses: actions/cache@v4  # Utilise l'action "cache" pour mettre en cache les fichiers, ce qui permet de gagner du temps lors des prochains runs
        with:
          path: ~/.sonar/cache  # Spécifie le chemin à mettre en cache, ici le cache des fichiers SonarQube
          key: ${{ runner.os }}-sonar  # Définition de la clé du cache, ici cela inclut le système d'exploitation du runner pour créer une clé unique
          restore-keys: ${{ runner.os }}-sonar  # Définition des clés de restauration du cache, permettant de récupérer les données du cache si disponible

      - name: Cache Maven packages  # Nom de l'étape : mettre en cache les packages Maven
        uses: actions/cache@v4  # Utilise l'action "cache" pour mettre en cache les fichiers Maven
        with:
          path: ~/.m2  # Spécifie le chemin à mettre en cache, ici le répertoire des dépendances Maven
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}  # La clé de cache inclut l'OS du runner et un hash basé sur les fichiers pom.xml pour déterminer les changements dans les dépendances
          restore-keys: ${{ runner.os }}-m2  # Définit les clés de restauration du cache pour Maven

      - name: Build and analyze  # Nom de l'étape : construire et analyser le projet
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Définition de la variable d'environnement SONAR_TOKEN, qui contient un token d'authentification pour SonarQube (stocké en tant que secret GitHub)
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=rom0raf_Commerzi  # Commande Maven pour vérifier le projet, exécuter SonarQube et analyser le code
